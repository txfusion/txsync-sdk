/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionParamsRestriction {
  export type FunctionParamValidationStruct = {
    validValue: BytesLike;
    paramPosition: BigNumberish;
    dataType: BigNumberish;
  };

  export type FunctionParamValidationStructOutput = [
    validValue: string,
    paramPosition: bigint,
    dataType: bigint
  ] & { validValue: string; paramPosition: bigint; dataType: bigint };
}

export interface RestrictionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateRestrictionCreationRequiredETH"
      | "createContractRestriction"
      | "createERC1155Restriction"
      | "createFunctionParamsRestriction"
      | "createFunctionRestriction"
      | "createNFT721Restriction"
      | "createUserRestriction"
      | "deployedRestrictions"
      | "getDeployedRestrictions"
      | "getRestrictionMethod"
      | "initialize"
      | "owner"
      | "priceFeedAddress"
      | "proxiableUUID"
      | "renounceOwnership"
      | "restrictionCreationPricesInUSD"
      | "restrictionsMethod"
      | "transferOwnership"
      | "updatePriceFeedAddress"
      | "updateRestrictionCreationPriceInUSD"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "FundsWithdrawn"
      | "Initialized"
      | "OwnershipTransferred"
      | "RestrictionCreated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateRestrictionCreationRequiredETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createContractRestriction",
    values: [string, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC1155Restriction",
    values: [string, AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createFunctionParamsRestriction",
    values: [
      string,
      AddressLike[],
      BytesLike[],
      FunctionParamsRestriction.FunctionParamValidationStruct[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFunctionRestriction",
    values: [string, AddressLike[], BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFT721Restriction",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserRestriction",
    values: [string, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedRestrictions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedRestrictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRestrictionMethod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictionCreationPricesInUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictionsMethod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRestrictionCreationPriceInUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "calculateRestrictionCreationRequiredETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createContractRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC1155Restriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFunctionParamsRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFunctionRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFT721Restriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestrictionMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictionCreationPricesInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictionsMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRestrictionCreationPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RestrictionCreatedEvent {
  export type InputTuple = [restriction: AddressLike];
  export type OutputTuple = [restriction: string];
  export interface OutputObject {
    restriction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RestrictionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RestrictionFactory;
  waitForDeployment(): Promise<this>;

  interface: RestrictionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateRestrictionCreationRequiredETH: TypedContractMethod<
    [priceInUSD: BigNumberish],
    [bigint],
    "view"
  >;

  createContractRestriction: TypedContractMethod<
    [_name: string, _contracts: AddressLike[], _statuses: boolean[]],
    [void],
    "payable"
  >;

  createERC1155Restriction: TypedContractMethod<
    [
      _name: string,
      _ERC1155ContractAddress: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "payable"
  >;

  createFunctionParamsRestriction: TypedContractMethod<
    [
      _name: string,
      _contracts: AddressLike[],
      _selectors: BytesLike[],
      _whitelistedParams: FunctionParamsRestriction.FunctionParamValidationStruct[][]
    ],
    [void],
    "payable"
  >;

  createFunctionRestriction: TypedContractMethod<
    [
      _name: string,
      _contracts: AddressLike[],
      _selectors: BytesLike[],
      _statuses: boolean[]
    ],
    [void],
    "payable"
  >;

  createNFT721Restriction: TypedContractMethod<
    [_name: string, _NFTContract: AddressLike],
    [void],
    "payable"
  >;

  createUserRestriction: TypedContractMethod<
    [_name: string, _users: AddressLike[], _statuses: boolean[]],
    [void],
    "payable"
  >;

  deployedRestrictions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getDeployedRestrictions: TypedContractMethod<[], [string[]], "view">;

  getRestrictionMethod: TypedContractMethod<
    [_restriction: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_priceFeedAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeedAddress: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  restrictionCreationPricesInUSD: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  restrictionsMethod: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFeedAddress: TypedContractMethod<
    [_priceFeedAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRestrictionCreationPriceInUSD: TypedContractMethod<
    [_restrictionCreationPriceInUSD: BigNumberish, _method: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateRestrictionCreationRequiredETH"
  ): TypedContractMethod<[priceInUSD: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createContractRestriction"
  ): TypedContractMethod<
    [_name: string, _contracts: AddressLike[], _statuses: boolean[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC1155Restriction"
  ): TypedContractMethod<
    [
      _name: string,
      _ERC1155ContractAddress: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createFunctionParamsRestriction"
  ): TypedContractMethod<
    [
      _name: string,
      _contracts: AddressLike[],
      _selectors: BytesLike[],
      _whitelistedParams: FunctionParamsRestriction.FunctionParamValidationStruct[][]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createFunctionRestriction"
  ): TypedContractMethod<
    [
      _name: string,
      _contracts: AddressLike[],
      _selectors: BytesLike[],
      _statuses: boolean[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createNFT721Restriction"
  ): TypedContractMethod<
    [_name: string, _NFTContract: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createUserRestriction"
  ): TypedContractMethod<
    [_name: string, _users: AddressLike[], _statuses: boolean[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployedRestrictions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeployedRestrictions"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRestrictionMethod"
  ): TypedContractMethod<[_restriction: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_priceFeedAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeedAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restrictionCreationPricesInUSD"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "restrictionsMethod"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFeedAddress"
  ): TypedContractMethod<
    [_priceFeedAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRestrictionCreationPriceInUSD"
  ): TypedContractMethod<
    [_restrictionCreationPriceInUSD: BigNumberish, _method: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RestrictionCreated"
  ): TypedContractEvent<
    RestrictionCreatedEvent.InputTuple,
    RestrictionCreatedEvent.OutputTuple,
    RestrictionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RestrictionCreated(address)": TypedContractEvent<
      RestrictionCreatedEvent.InputTuple,
      RestrictionCreatedEvent.OutputTuple,
      RestrictionCreatedEvent.OutputObject
    >;
    RestrictionCreated: TypedContractEvent<
      RestrictionCreatedEvent.InputTuple,
      RestrictionCreatedEvent.OutputTuple,
      RestrictionCreatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
